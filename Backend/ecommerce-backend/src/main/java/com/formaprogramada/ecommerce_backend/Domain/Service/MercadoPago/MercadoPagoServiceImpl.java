package com.formaprogramada.ecommerce_backend.Domain.Service.MercadoPago;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.formaprogramada.ecommerce_backend.Domain.Service.Pedido.PedidoService;
import com.formaprogramada.ecommerce_backend.Infrastructure.Persistence.Entity.Usuario.UsuarioEntity;
import com.formaprogramada.ecommerce_backend.Infrastructure.Persistence.Repository.Usuario.JpaUsuarioRepository;
import com.mercadopago.MercadoPagoConfig;
import com.mercadopago.client.preference.*;
import com.mercadopago.exceptions.MPApiException;
import com.mercadopago.exceptions.MPException;
import com.mercadopago.resources.preference.Preference;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import com.mercadopago.MercadoPagoConfig;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Map;
@Service
public class MercadoPagoServiceImpl implements MercadoPagoService {

    @Autowired
    private PedidoService pedidoService;

    @Value("${mercadopago.webhook.key}")
    private String webhookKey;

    @Value("${mercadopago.sandbox.enabled:true}")
    private boolean sandboxEnabled;

    @Value("${mercadopago.base-url:https://forma-programada.onrender.com}")
    private String baseUrl;
    @Override
    public String confirmarPedido(String mercadolibreToken, String title, BigDecimal price, String pedidoId, int quantity) {
        try {
            // 1Ô∏è‚É£ Validaciones b√°sicas
            if (price == null || price.compareTo(BigDecimal.ZERO) <= 0) {
                throw new IllegalArgumentException("El precio debe ser mayor a 0");
            }

            // 2Ô∏è‚É£ Detectar ambiente autom√°ticamente
            boolean isTestToken = mercadolibreToken.startsWith("TEST-");
            boolean isProductionToken = mercadolibreToken.startsWith("APP_USR-");

            if (!isTestToken && !isProductionToken) {
                throw new IllegalArgumentException("Token inv√°lido. Debe comenzar con TEST- o APP_USR-");
            }

            // 3Ô∏è‚É£ Configurar MercadoPago
            MercadoPagoConfig.setAccessToken(mercadolibreToken);

            String ambiente = isTestToken ? "SANDBOX" : "PRODUCCI√ìN";
            System.out.println("üîë Token configurado para: " + ambiente);
            System.out.println("üì¶ Procesando pedido: " + pedidoId + " por $" + price);

            // 4Ô∏è‚É£ Crear item
            PreferenceItemRequest itemRequest = PreferenceItemRequest.builder()
                    .id(pedidoId)
                    .title(title)
                    .quantity(quantity)
                    .unitPrice(price)
                    .currencyId("ARS")
                    .categoryId("others") // Categor√≠a general
                    .build();

            // 5Ô∏è‚É£ URLs de retorno
            String successUrl = baseUrl + "/api/mp/pago-exitoso?pedidoId=" + pedidoId;
            String pendingUrl = baseUrl + "/api/mp/pago-pendiente?pedidoId=" + pedidoId;
            String failureUrl = baseUrl + "/api/mp/pago-fallido?pedidoId=" + pedidoId;
            String webhookUrl = baseUrl + "/api/mp/webhook";

            // 6Ô∏è‚É£ Configuraci√≥n seg√∫n el ambiente
            PreferenceRequest.PreferenceRequestBuilder requestBuilder = PreferenceRequest.builder()
                    .items(List.of(itemRequest))

                    // URLs de retorno
                    .backUrls(
                            PreferenceBackUrlsRequest.builder()
                                    .success(successUrl)
                                    .pending(pendingUrl)
                                    .failure(failureUrl)
                                    .build()
                    )

                    // Referencias para tracking
                    .externalReference(pedidoId)
                    .notificationUrl(webhookUrl)

                    // Expiraci√≥n
                    .expires(true)
                    .expirationDateFrom(OffsetDateTime.now())
                    .expirationDateTo(OffsetDateTime.now().plusHours(24))

                    // Descriptor en el resumen de la tarjeta
                    .statementDescriptor("PEDIDO " + pedidoId);

            // üî• CONFIGURACI√ìN ESPEC√çFICA SEG√öN AMBIENTE
            if (isTestToken) {
                // CONFIGURACI√ìN SANDBOX
                requestBuilder
                        .binaryMode(false) // Permitir estados intermedios
                        .autoReturn("approved")
                        .paymentMethods(
                                PreferencePaymentMethodsRequest.builder()
                                        .excludedPaymentTypes(List.of()) // No excluir nada en test
                                        .excludedPaymentMethods(List.of())
                                        .installments(12) // Hasta 12 cuotas en test
                                        .defaultInstallments(1)
                                        .build()
                        );
            } else {
                // üè≠ CONFIGURACI√ìN PRODUCCI√ìN
                requestBuilder
                        .binaryMode(true) // Solo approved/rejected en producci√≥n
                        .autoReturn("approved")
                        .paymentMethods(
                                PreferencePaymentMethodsRequest.builder()
                                        // M√©todos excluidos (opcional)
                                        .excludedPaymentTypes(List.of(
                                                // "ticket", // Excluir efectivo si no quieres
                                                // "atm" // Excluir cajeros si no quieres
                                        ))
                                        .excludedPaymentMethods(List.of(
                                                // "rapipago", // Excluir Rapipago
                                                // "pagofacil" // Excluir Pago F√°cil
                                        ))
                                        .installments(12) // M√°ximo cuotas permitidas
                                        .defaultInstallments(1) // Cuotas por defecto
                                        .build()
                        )

                        // üîí CONFIGURACI√ìN ADICIONAL DE SEGURIDAD PARA PRODUCCI√ìN
                        .additionalInfo("Compra en tienda online")
                        .marketplace("NONE") // No es marketplace

                        // üìß Informaci√≥n del comprador (recomendado en producci√≥n)
                        .payer(
                                PreferencePayerRequest.builder()
                                        .name("Cliente")
                                        .surname("Tienda")
                                        .email("cliente@email.com") // Email gen√©rico
                                        .build()
                        );
            }

            // 7Ô∏è‚É£ Crear la preferencia
            PreferenceRequest preferenceRequest = requestBuilder.build();
            PreferenceClient client = new PreferenceClient();
            Preference preference = client.create(preferenceRequest);

            // 8Ô∏è‚É£ Validar que se cre√≥ correctamente
            if (preference.getId() == null || preference.getId().isEmpty()) {
                throw new RuntimeException("‚ùå Preference creada sin ID v√°lido");
            }

            // 9Ô∏è‚É£ Obtener URL seg√∫n ambiente
            String initPoint;
            if (isTestToken) {
                // SANDBOX: Usar sandbox init point
                initPoint = preference.getSandboxInitPoint();
                if (initPoint == null || initPoint.isEmpty()) {
                    initPoint = "https://sandbox.mercadopago.com.ar/checkout/v1/redirect?pref_id=" + preference.getId();
                }
            } else {
                // PRODUCCI√ìN: Usar init point normal
                initPoint = preference.getInitPoint();
                if (initPoint == null || initPoint.isEmpty()) {
                    throw new RuntimeException("‚ùå No se pudo obtener URL de pago de producci√≥n");
                }
            }

            // üîü Verificaci√≥n final seg√∫n ambiente
            if (isTestToken && !initPoint.contains("sandbox")) {
                throw new RuntimeException("‚ùå ERROR: Token TEST pero URL no es de sandbox");
            }
            if (isProductionToken && initPoint.contains("sandbox")) {
                throw new RuntimeException("‚ùå ERROR: Token PRODUCCI√ìN pero URL es de sandbox");
            }

            // 1Ô∏è‚É£1Ô∏è‚É£ Guardar preference ID en base de datos
            try {
                pedidoService.guardarMercadoPagoId(pedidoId, preference.getId());
                System.out.println("‚úÖ Preference ID guardado: " + preference.getId());
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Error guardando preference ID: " + e.getMessage());
            }

            // 1Ô∏è‚É£2Ô∏è‚É£ Logs de √©xito
            System.out.println("‚úÖ Preferencia creada exitosamente en " + ambiente);
            System.out.println("üÜî Preference ID: " + preference.getId());
            System.out.println("üîó " + ambiente + " URL: " + initPoint);
            System.out.println("üéØ External Reference: " + pedidoId);

            if (isTestToken) {
                System.out.println("üí≥ Usar tarjetas de TEST de MercadoPago");
            } else {
                System.out.println("üí∞ PRODUCCI√ìN: Procesar√° pagos REALES");
            }

            return initPoint;

        } catch (MPApiException e) {
            System.err.println("‚ùå ERROR API MercadoPago:");
            System.err.println("   üìä Status Code: " + e.getStatusCode());
            System.err.println("   üí¨ Mensaje: " + e.getMessage());

            if (e.getApiResponse() != null) {
                System.err.println("   üìÑ Respuesta: " + e.getApiResponse().getContent());
            }

            // Sugerencias seg√∫n el error
            switch (e.getStatusCode()) {
                case 400:
                    System.err.println("üí° Verificar: Formato de datos, URLs HTTPS v√°lidas");
                    break;
                case 401:
                    System.err.println("üîê Token inv√°lido o expirado");
                    break;
                case 403:
                    System.err.println("üö´ Token sin permisos para crear preferencias");
                    break;
                case 429:
                    System.err.println("‚è±Ô∏è Rate limit excedido, reintentar en unos minutos");
                    break;
                default:
                    System.err.println("üîç Error no documentado, revisar con soporte MP");
            }

            throw new RuntimeException("Error API MercadoPago: " + e.getMessage(), e);

        } catch (Exception e) {
            System.err.println("‚ùå ERROR INESPERADO: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Error procesando pago: " + e.getMessage(), e);
        }
    }
    public boolean verifySignature(String signature, Map<String, Object> payload) {
        System.out.println("üîê Verificando webhook signature:");
        System.out.println("   - Signature recibida: " + (signature != null ? "S√ç" : "NO"));
        System.out.println("   - Webhook key configurada: " + (webhookKey != null ? "S√ç" : "NO"));
        System.out.println("   - Modo sandbox: " + sandboxEnabled);

        // üî• EN SANDBOX, SER M√ÅS PERMISIVO CON LA VERIFICACI√ìN
        if (sandboxEnabled) {
            System.out.println("üß™ Modo sandbox: verificaci√≥n permisiva activada");

            // Si no hay signature en sandbox, permitir
            if (signature == null) {
                System.out.println("‚ö†Ô∏è Sin signature en sandbox - PERMITIENDO");
                return true;
            }

            // Si no hay webhook key configurada en sandbox, permitir
            if (webhookKey == null || webhookKey.trim().isEmpty()) {
                System.out.println("‚ö†Ô∏è Sin webhook key en sandbox - PERMITIENDO");
                return true;
            }
        }

        // Verificaci√≥n normal para producci√≥n o cuando hay signature
        if (signature == null || webhookKey == null) {
            System.out.println("‚ùå Signature o webhook key faltante en producci√≥n");
            return false;
        }

        try {
            String payloadString = new ObjectMapper().writeValueAsString(payload);
            SecretKeySpec secretKey = new SecretKeySpec(webhookKey.getBytes(), "HmacSHA256");
            Mac mac = Mac.getInstance("HmacSHA256");
            mac.init(secretKey);
            byte[] hash = mac.doFinal(payloadString.getBytes());
            String computedSignature = "sha256=" + Base64.getEncoder().encodeToString(hash);

            System.out.println("üîê Signature esperada: " + computedSignature);
            System.out.println("üîê Signature recibida: " + signature);

            boolean isValid = computedSignature.equals(signature);
            System.out.println("üîê Signature v√°lida: " + isValid);

            return isValid;

        } catch (Exception e) {
            System.err.println("‚ùå Error verificando signature: " + e.getMessage());
            e.printStackTrace();

            // En sandbox, si hay error de verificaci√≥n, permitir
            if (sandboxEnabled) {
                System.out.println("üß™ Error en sandbox - PERMITIENDO por desarrollo");
                return true;
            }

            return false;
        }
    }
}